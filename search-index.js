var searchIndex={};
searchIndex["erasable"] = {"doc":"","i":[[3,"Thin","erasable","Wrapper struct to create thin pointer types.",null,null],[5,"erase","","Erase a pointer.",null,[[["sized"],["nonnull"]],["erasedptr"]]],[6,"ErasedPtr","","A thin, type-erased pointer.",null,null],[8,"ErasablePtr","","A (smart) pointer type that can be type-erased (making a…",null,null],[10,"erase","","Turn this erasable pointer into an erased pointer.",0,[[],["erasedptr"]]],[10,"unerase","","Unerase this erased pointer.",0,[[["erasedptr"]],["self"]]],[8,"Erasable","","A pointee type that can be type-erased (making a thin…",null,null],[11,"erase","","Turn this erasable pointer into an erased pointer.",1,[[["nonnull"]],["erasedptr"]]],[10,"unerase","","Unerase this erased pointer.",1,[[["erasedptr"]],["nonnull"]]],[11,"into_inner","","Extract the wrapped pointer.",2,[[],["p"]]],[11,"with","","Run a closure with a borrow of the real pointer.",2,[[["self"],["f"]],["t"]]],[11,"with_mut","","Run a closure with a mutable borrow of the real pointer.",2,[[["self"],["f"]],["t"]]],[11,"unerase","","",2,[[["nonnull",["erased"]],["erased"]],["nonnull"]]],[11,"from","","",2,[[],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into_iter","","",2,[[],["i"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"deref","","",2,[[["self"]]]],[11,"deref_mut","","",2,[[["self"]]]],[11,"from","","",2,[[["p"]],["self"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["thin"]],["bool"]]],[11,"cmp","","",2,[[["self"],["thin"]],["ordering"]]],[11,"partial_cmp","","",2,[[["self"],["thin"]],[["option",["ordering"]],["ordering"]]]],[11,"drop","","",2,[[["self"]]]],[11,"hash","","",2,[[["self"],["h"]]]],[11,"finish","","",2,[[["self"]],["u64"]]],[11,"write","","",2,[[["self"]]]],[11,"write_u8","","",2,[[["self"],["u8"]]]],[11,"write_u16","","",2,[[["u16"],["self"]]]],[11,"write_u32","","",2,[[["self"],["u32"]]]],[11,"write_u64","","",2,[[["self"],["u64"]]]],[11,"write_u128","","",2,[[["self"],["u128"]]]],[11,"write_usize","","",2,[[["self"],["usize"]]]],[11,"write_i8","","",2,[[["self"],["i8"]]]],[11,"write_i16","","",2,[[["self"],["i16"]]]],[11,"write_i32","","",2,[[["self"],["i32"]]]],[11,"write_i64","","",2,[[["i64"],["self"]]]],[11,"write_i128","","",2,[[["self"],["i128"]]]],[11,"write_isize","","",2,[[["isize"],["self"]]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"size_hint","","",2,[[["self"]]]],[11,"nth","","",2,[[["self"],["usize"]],["option"]]],[11,"next_back","","",2,[[["self"]],["option"]]],[11,"nth_back","","",2,[[["self"],["usize"]],["option"]]],[11,"as_ref","","",2,[[["self"]],["t"]]],[11,"as_mut","","",2,[[["self"]],["t"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]]],"p":[[8,"ErasablePtr"],[8,"Erasable"],[3,"Thin"]]};
searchIndex["rc_borrow"] = {"doc":"","i":[[3,"ArcBorrow","rc_borrow","ArcBorrow",null,null],[3,"RcBorrow","","RcBorrow",null,null],[11,"upgrade","","Convert this borrowed pointer into an owned pointer.",0,[[],["arc"]]],[11,"downgrade","","Convert this borrowed pointer into a standard reference.",0,[[],["t"]]],[11,"upgrade","","Convert this borrowed pointer into an owned pointer.",1,[[],["rc"]]],[11,"downgrade","","Convert this borrowed pointer into a standard reference.",1,[[],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"unerase","","",0,[[["nonnull",["erased"]],["erased"]],["nonnull"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"unerase","","",1,[[["nonnull",["erased"]],["erased"]],["nonnull"]]],[11,"deref","","",0,[[["self"]],["t"]]],[11,"deref","","",1,[[["self"]],["t"]]],[11,"from","","",0,[[["arc"]],["arcborrow"]]],[11,"from","","",1,[[["rc"]],["rcborrow"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["o"]],["bool"]]],[11,"eq","","",0,[[["o"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["o"]],["bool"]]],[11,"eq","","",1,[[["o"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"]],["bool"]]],[11,"cmp","","",0,[[["self"]],["ordering"]]],[11,"cmp","","",1,[[["self"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["o"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",0,[[["o"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",0,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["o"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["o"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"as_ref","","",0,[[["self"]],["u"]]],[11,"as_ref","","",1,[[["self"]],["u"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["self"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"to_socket_addrs","","",0,[[["self"]],["result"]]],[11,"to_socket_addrs","","",1,[[["self"]],["result"]]],[11,"erase","","",0,[[],["erasedptr"]]],[11,"unerase","","",0,[[["erasedptr"]],["self"]]],[11,"erase","","",1,[[],["erasedptr"]]],[11,"unerase","","",1,[[["erasedptr"]],["self"]]]],"p":[[3,"ArcBorrow"],[3,"RcBorrow"]]};
searchIndex["rc_box"] = {"doc":"","i":[[3,"ArcBox","rc_box","ArcBox",null,null],[3,"RcBox","","RcBox",null,null],[11,"downcast","","",0,[[],[["result",["arcbox"]],["arcbox"]]]],[11,"downcast","","",0,[[],[["result",["arcbox"]],["arcbox"]]]],[11,"from_raw","","",0,[[],["self"]]],[11,"get_mut","","",0,[[["self"]],[["t"],["option"]]]],[11,"into_raw","","",0,[[],["nonnull"]]],[11,"leak","","",0,[[],["t"]]],[11,"make_mut","","",0,[[["self"]],["t"]]],[11,"new","","",0,[[["t"]],["self"]]],[11,"ptr_eq","","",0,[[["self"]],["bool"]]],[11,"strong_count","","",0,[[["self"]],["usize"]]],[11,"try_unwrap","","",0,[[],["result"]]],[11,"into_inner","","",0,[[],["t"]]],[11,"weak_count","","",0,[[["self"]],["usize"]]],[11,"downcast","","",1,[[],[["rcbox"],["result",["rcbox"]]]]],[11,"downcast","","",1,[[],[["rcbox"],["result",["rcbox"]]]]],[11,"from_raw","","",1,[[],["self"]]],[11,"get_mut","","",1,[[["self"]],[["t"],["option"]]]],[11,"into_raw","","",1,[[],["nonnull"]]],[11,"leak","","",1,[[],["t"]]],[11,"make_mut","","",1,[[["self"]],["t"]]],[11,"new","","",1,[[["t"]],["self"]]],[11,"ptr_eq","","",1,[[["self"]],["bool"]]],[11,"strong_count","","",1,[[["self"]],["usize"]]],[11,"try_unwrap","","",1,[[],["result"]]],[11,"into_inner","","",1,[[],["t"]]],[11,"weak_count","","",1,[[["self"]],["usize"]]],[11,"from","","",0,[[],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into_iter","","",0,[[],["i"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"unerase","","",0,[[["nonnull",["erased"]],["erased"]],["nonnull"]]],[11,"from","","",1,[[],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into_iter","","",1,[[],["i"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"unerase","","",1,[[["nonnull",["erased"]],["erased"]],["nonnull"]]],[11,"deref","","",0,[[["self"]],["t"]]],[11,"deref","","",1,[[["self"]],["t"]]],[11,"deref_mut","","",0,[[["self"]],["t"]]],[11,"deref_mut","","",1,[[["self"]],["t"]]],[11,"from","","",0,[[],["self"]]],[11,"from","","",0,[[["str"]],["self"]]],[11,"from","","",0,[[["box"]],["self"]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"from","","",0,[[["t"]],["self"]]],[11,"from","","",0,[[["vec"]],["self"]]],[11,"from","","",1,[[],["self"]]],[11,"from","","",1,[[["str"]],["self"]]],[11,"from","","",1,[[["box"]],["self"]]],[11,"from","","",1,[[["string"]],["self"]]],[11,"from","","",1,[[["t"]],["self"]]],[11,"from","","",1,[[["vec"]],["self"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"]],["bool"]]],[11,"eq","","",1,[[["self"]],["bool"]]],[11,"cmp","","",0,[[["self"]],["ordering"]]],[11,"cmp","","",1,[[["self"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"try_from","","",0,[[["arc"]],[["arc"],["result",["arcbox","arc"]],["arcbox"]]]],[11,"try_from","","",1,[[["rc"]],[["rcbox"],["result",["rcbox","rc"]],["rc"]]]],[11,"drop","","",0,[[["self"]]]],[11,"drop","","",1,[[["self"]]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"finish","","",0,[[["self"]],["u64"]]],[11,"write","","",0,[[["self"]]]],[11,"write_u8","","",0,[[["self"],["u8"]]]],[11,"write_u16","","",0,[[["u16"],["self"]]]],[11,"write_u32","","",0,[[["self"],["u32"]]]],[11,"write_u64","","",0,[[["self"],["u64"]]]],[11,"write_u128","","",0,[[["self"],["u128"]]]],[11,"write_usize","","",0,[[["self"],["usize"]]]],[11,"write_i8","","",0,[[["self"],["i8"]]]],[11,"write_i16","","",0,[[["self"],["i16"]]]],[11,"write_i32","","",0,[[["self"],["i32"]]]],[11,"write_i64","","",0,[[["i64"],["self"]]]],[11,"write_i128","","",0,[[["self"],["i128"]]]],[11,"write_isize","","",0,[[["isize"],["self"]]]],[11,"finish","","",1,[[["self"]],["u64"]]],[11,"write","","",1,[[["self"]]]],[11,"write_u8","","",1,[[["self"],["u8"]]]],[11,"write_u16","","",1,[[["u16"],["self"]]]],[11,"write_u32","","",1,[[["self"],["u32"]]]],[11,"write_u64","","",1,[[["self"],["u64"]]]],[11,"write_u128","","",1,[[["self"],["u128"]]]],[11,"write_usize","","",1,[[["self"],["usize"]]]],[11,"write_i8","","",1,[[["self"],["i8"]]]],[11,"write_i16","","",1,[[["self"],["i16"]]]],[11,"write_i32","","",1,[[["self"],["i32"]]]],[11,"write_i64","","",1,[[["i64"],["self"]]]],[11,"write_i128","","",1,[[["self"],["i128"]]]],[11,"write_isize","","",1,[[["isize"],["self"]]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,[[["self"]]]],[11,"nth","","",0,[[["self"],["usize"]],["option"]]],[11,"next","","",1,[[["self"]],["option"]]],[11,"size_hint","","",1,[[["self"]]]],[11,"nth","","",1,[[["self"],["usize"]],["option"]]],[11,"from_iter","","",0,[[["intoiterator"]],["self"]]],[11,"from_iter","","",1,[[["intoiterator"]],["self"]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"nth_back","","",0,[[["self"],["usize"]],["option"]]],[11,"next_back","","",1,[[["self"]],["option"]]],[11,"nth_back","","",1,[[["self"],["usize"]],["option"]]],[11,"as_ref","","",0,[[["self"]],["t"]]],[11,"as_ref","","",1,[[["self"]],["t"]]],[11,"as_mut","","",0,[[["self"]],["t"]]],[11,"as_mut","","",1,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"erase","","",0,[[],["erasedptr"]]],[11,"unerase","","",0,[[["erasedptr"]],["self"]]],[11,"erase","","",1,[[],["erasedptr"]]],[11,"unerase","","",1,[[["erasedptr"]],["self"]]]],"p":[[3,"ArcBox"],[3,"RcBox"]]};
searchIndex["rowan"] = {"doc":"A generic library for lossless syntax trees.","i":[[3,"Kind","rowan","Raw kind tag for each token or node in the tree.",null,null],[12,"0","","",0,null],[4,"Direction","","Direction of an iterator.",null,null],[13,"Next","","",1,null],[13,"Prev","","",1,null],[4,"NodeOrToken","","Convenience enum wrapping either a node or a token.",null,null],[13,"Node","","",2,null],[13,"Token","","",2,null],[4,"WalkEvent","","Steps in the tree walking process.",null,null],[13,"Enter","","Fired when entering the node. Listen for this event for…",3,null],[13,"Leave","","Fired when leaving the node. Listen for this event for…",3,null],[11,"into_node","","",2,[[],["option"]]],[11,"as_node","","",2,[[["self"]],[["option"],["node"]]]],[11,"is_node","","",2,[[["self"]],["bool"]]],[11,"into_token","","",2,[[],["option"]]],[11,"as_token","","",2,[[["self"]],[["option"],["token"]]]],[11,"is_token","","",2,[[["self"]],["bool"]]],[11,"as_ref","","",2,[[["self"]],[["nodeortoken"],["node"],["token"]]]],[11,"as_deref","","",2,[[["self"]],["nodeortoken"]]],[11,"map","","",3,[[],["walkevent"]]],[11,"enter","","",3,[[],["option"]]],[11,"leave","","",3,[[],["option"]]],[0,"green","","The \"green tree\" is the immutable, atomically reference…",null,null],[3,"GreenBuilder","rowan::green","Construction cache for green tree elements.",null,null],[3,"Checkpoint","","Checkpoint for maybe wrapping a node. See…",null,null],[3,"GreenTreeBuilder","","Builder for a green tree.",null,null],[3,"GreenNode","","Internal node in the immutable tree. It has other nodes…",null,null],[12,"kind","","The kind of this node.",4,null],[12,"text_len","","The length of the text covered by this node.",4,null],[3,"Children","","Children of a node in the immutable green tree.",null,null],[3,"GreenToken","","Leaf node in the immutable tree.",null,null],[12,"kind","","The kind of this token.",5,null],[12,"text","","The text of this token.",5,null],[11,"children","","Children of this node.",4,[[["self"]],["children"]]],[11,"text_len","rowan","The length of the text of this element.",2,[[["self"]],["strindex"]]],[11,"kind","","The kind of this element.",2,[[["self"]],["kind"]]],[11,"children","","Children of this element.",2,[[["self"]],["children"]]],[11,"node","rowan::green","Create a new node or clone a new Arc to an existing…",6,[[["self"],["kind"],["i"]],[["greennode"],["arc",["greennode"]]]]],[11,"token","","Create a new token or clone a new Arc to an existing…",6,[[["str"],["self"],["kind"]],[["greentoken"],["arc",["greentoken"]]]]],[11,"new","","Create a new builder.",7,[[],["self"]]],[11,"new_with","","Create a new builder, reusing a `GreenBuilder`.",7,[[["greenbuilder"]],["self"]]],[11,"builder","","The `GreenBuilder` used to create and dedupe nodes.",7,[[["self"]],["greenbuilder"]]],[11,"add","","Add an element to the current branch.",7,[[["self"]],["self"]]],[11,"token","","Add a new token to the current branch.",7,[[["str"],["self"],["kind"]],["self"]]],[11,"node","","Add a new node to the current branch.",7,[[["self"],["kind"],["i"]],["self"]]],[11,"start_node","","Start a new child node and make it the current branch.",7,[[["self"],["kind"]],["self"]]],[11,"finish_node","","Finish the current branch and restore its parent as current.",7,[[["self"]],["self"]]],[11,"checkpoint","","Prepare for maybe wrapping the next node.",7,[[["self"]],["checkpoint"]]],[11,"start_node_at","","Wrap the elements added after `checkpoint` in a new node…",7,[[["self"],["checkpoint"],["kind"]],["self"]]],[11,"finish","","Complete tree building.",7,[[["self"]],[["greennode"],["arc",["greennode"]]]]],[11,"recycle","","Destroy this tree builder and recycle its build cache.",7,[[],["greenbuilder"]]],[0,"syntax","rowan","The \"syntax tree\" is a thread-local view of the green tree…",null,null],[3,"Children","rowan::syntax","Children nodes in the syntax tree.",null,null],[3,"Node","","Node (or token) in the syntax tree.",null,null],[3,"Text","","Text of a node in the syntax tree.",null,null],[3,"Token","","Token in the syntax tree.",null,null],[3,"Generic","","Generic treatment of language trees.",null,null],[11,"node","","This node.",8,[[["self"]],["node"]]],[11,"range","","Range of this text.",8,[[["self"]],["strrange"]]],[11,"len","","Length of this text.",8,[[["self"]],["strindex"]]],[11,"is_empty","","Is this text empty?",8,[[["self"]],["bool"]]],[11,"leaves","","The leaf nodes that make up this text.",8,[[["language"],["self"]]]],[11,"chunks","","The text fragments that make up this text.",8,[[["self"]]]],[11,"slice","","Slice a subset of this text.",8,[[["self"]],["text"]]],[11,"new_root","","Create a new root syntax node.",9,[[["lang"]],["self"]]],[11,"generic","","A generic version of this node without language-specific…",9,[[],[["node",["generic"]],["generic"]]]],[11,"with_lang","","This node with language-specific behavior.",9,[[["l"]],["node"]]],[11,"is_token","","Is this node a token?",9,[[["self"]],["bool"]]],[11,"as_token","","Convert this node into a token.",9,[[["self"]],[["option",["token"]],["token"]]]],[11,"into_token","","Convert this node into a token.",9,[[],["token"]]],[11,"walk","","Walk this subtree, including this node.",9,[[]]],[11,"preorder","","All nodes in this subtree in preorder, including this node.",9,[[]]],[11,"postorder","","All nodes in this subtree in postorder, including this node.",9,[[]]],[11,"children","","Child nodes (or tokens) of this node.",9,[[],["children"]]],[11,"subtrees","","Children non-token subtrees of this node.",9,[[]]],[11,"siblings","","Sibling trees (and tokens) starting at and including this…",9,[[["direction"]]]],[11,"ancestors","","The parent chain from this node, starting with this node.",9,[[]]],[11,"green","","The green element backing this syntax node.",9,[[["self"]],[["arcborrow",["greentoken"]],["nodeortoken",["arcborrow","arcborrow"]],["arcborrow",["greennode"]]]]],[11,"kind","","The kind of this node.",9,[[["self"]],["kind"]]],[11,"text","","The text of this node.",9,[[],["text"]]],[11,"text_range","","The range of text this node covers.",9,[[["self"]],["strrange"]]],[11,"replace_with","","Create a new green tree with this node replaced. The…",9,[[["self"]],[["arc",["greentoken"]],["nodeortoken",["arc","arc"]],["arc",["greennode"]]]]],[11,"parent","","The parent of this node.",9,[[],[["node"],["option",["node"]]]]],[11,"next_sibling","","The next token or node of this node's parent.",9,[[],[["node"],["option",["node"]]]]],[11,"next_subtree","","The next non-token node of this node's parent.",9,[[],[["node"],["option",["node"]]]]],[11,"prev_sibling","","The previous token or node of this node's parent.",9,[[],[["node"],["option",["node"]]]]],[11,"prev_subtree","","The previous non-token node of this node's parent.",9,[[],[["node"],["option",["node"]]]]],[11,"first_child","","The first child node or token of this node.",9,[[],[["node"],["option",["node"]]]]],[11,"first_subtree","","The first child non-token subtree of this node.",9,[[],[["node"],["option",["node"]]]]],[11,"last_child","","The last child node or token of this node.",9,[[],[["node"],["option",["node"]]]]],[11,"last_subtree","","The last child non-token subtree of this node.",9,[[],[["node"],["option",["node"]]]]],[11,"new","","Create a new token from a node.",10,[[["node"]],[["option",["token"]],["token"]]]],[11,"new_ref","","Create a new token reference from a node reference.",10,[[["node"]],[["option",["token"]],["token"]]]],[11,"into_node","","Convert this token back into a node.",10,[[],["node"]]],[11,"as_node","","Convert this token back into a node.",10,[[["self"]],["node"]]],[11,"ancestors","","The parent chain from this token, starting with this node.",10,[[]]],[11,"siblings","","Sibling trees starting at and including this token.",10,[[["direction"]]]],[11,"green","","The green token backing this token.",10,[[["self"]],[["arcborrow",["greentoken"]],["greentoken"]]]],[11,"kind","","The kind of this token.",10,[[["self"]],["kind"]]],[11,"text","","The text of this token.",10,[[],["text"]]],[11,"text_range","","The range of text this token covers.",10,[[["self"]],["strrange"]]],[11,"as_str","","The raw string of this token.",10,[[["self"]],["str"]]],[11,"replace_with","","Create a new green tree with this node replaced. The…",10,[[["self"]],[["arc",["greentoken"]],["nodeortoken",["arc","arc"]],["arc",["greennode"]]]]],[11,"parent","","The parent of this token.",10,[[],[["node"],["option",["node"]]]]],[11,"next_sibling","","The next subtree of this node's parent.",10,[[],[["node"],["option",["node"]]]]],[11,"prev_sibling","","The previous subtree of this node's parent.",10,[[],[["node"],["option",["node"]]]]],[8,"Language","","Specialization information for a particular language…",null,null],[16,"Kind","","A typed kind to identify the kind of a node in the tree.",11,null],[10,"kind_into_raw","","Turn a typed kind into a raw kind.",11,[[["self"]],["kind"]]],[10,"kind_from_raw","","Turn a raw kind into a typed kind.",11,[[["self"],["kind"]]]],[11,"is_token","","Determine if a node is a token.",11,[[["node"],["self"]],["bool"]]],[11,"from","rowan","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"unerase","","",0,[[["nonnull",["erased"]],["erased"]],["nonnull"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"unerase","","",1,[[["nonnull",["erased"]],["erased"]],["nonnull"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"unerase","","",2,[[["nonnull",["erased"]],["erased"]],["nonnull"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"unerase","","",3,[[["nonnull",["erased"]],["erased"]],["nonnull"]]],[11,"from","rowan::green","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"unerase","","",6,[[["nonnull",["erased"]],["erased"]],["nonnull"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"unerase","","",12,[[["nonnull",["erased"]],["erased"]],["nonnull"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"unerase","","",7,[[["nonnull",["erased"]],["erased"]],["nonnull"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"unerase","","",4,[[["nonnull",["erased"]],["erased"]],["nonnull"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"into_iter","","",13,[[],["i"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"unerase","","",13,[[["nonnull",["erased"]],["erased"]],["nonnull"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"unerase","","",5,[[["nonnull",["erased"]],["erased"]],["nonnull"]]],[11,"from","rowan::syntax","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"into_iter","","",14,[[],["i"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"unerase","","",14,[[["nonnull",["erased"]],["erased"]],["nonnull"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"unerase","","",9,[[["nonnull",["erased"]],["erased"]],["nonnull"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"unerase","","",8,[[["nonnull",["erased"]],["erased"]],["nonnull"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"unerase","","",10,[[["nonnull",["erased"]],["erased"]],["nonnull"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"unerase","","",15,[[["nonnull",["erased"]],["erased"]],["nonnull"]]],[11,"kind_into_raw","","",15,[[["self"],["kind"]],["kind"]]],[11,"kind_from_raw","","",15,[[["self"],["kind"]],["kind"]]],[11,"drop","","",9,[[["self"]]]],[11,"from","rowan","",2,[[["greennode"],["arc",["greennode"]]],["self"]]],[11,"from","","",2,[[["greentoken"],["arc",["greentoken"]]],["self"]]],[11,"from","","",2,[[["arcborrow",["greennode"]],["greennode"]],["self"]]],[11,"from","","",2,[[["arcborrow",["greentoken"]],["greentoken"]],["self"]]],[11,"from","","",2,[[["greennode"]],["self"]]],[11,"from","","",2,[[["greentoken"]],["self"]]],[11,"next_back","rowan::green","",13,[[["self"]],["option"]]],[11,"nth_back","","",13,[[["self"],["usize"]],["option"]]],[11,"next_back","rowan::syntax","",14,[[["self"]],["option"]]],[11,"nth_back","","",14,[[["self"],["usize"]],["option"]]],[11,"len","rowan::green","",13,[[["self"]],["usize"]]],[11,"len","rowan::syntax","",14,[[["self"]],["usize"]]],[11,"next","rowan::green","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,[[["self"]]]],[11,"count","","",13,[[],["usize"]]],[11,"last","","",13,[[],["option"]]],[11,"nth","","",13,[[["self"],["usize"]],["option"]]],[11,"next","rowan::syntax","",14,[[["self"]],["option"]]],[11,"size_hint","","",14,[[["self"]]]],[11,"count","","",14,[[],["usize"]]],[11,"last","","",14,[[],["option"]]],[11,"nth","","",14,[[["self"],["usize"]],["option"]]],[11,"clone","rowan","",2,[[["self"]],["nodeortoken"]]],[11,"clone","","",1,[[["self"]],["direction"]]],[11,"clone","","",3,[[["self"]],["walkevent"]]],[11,"clone","rowan::green","",13,[[["self"]],["children"]]],[11,"clone","","",6,[[["self"]],["greenbuilder"]]],[11,"clone","","",12,[[["self"]],["checkpoint"]]],[11,"clone","rowan::syntax","",8,[[["self"]],["text"]]],[11,"clone","","",9,[[["self"]],["node"]]],[11,"clone","","",10,[[["self"]],["token"]]],[11,"clone","","",15,[[["self"]],["generic"]]],[11,"clone","rowan","",0,[[["self"]],["kind"]]],[11,"default","rowan::green","",6,[[],["greenbuilder"]]],[11,"default","","",7,[[],["greentreebuilder"]]],[11,"default","rowan::syntax","",15,[[],["generic"]]],[11,"cmp","rowan::green","",12,[[["self"],["checkpoint"]],["ordering"]]],[11,"cmp","rowan::syntax","",15,[[["self"],["generic"]],["ordering"]]],[11,"cmp","rowan","",0,[[["self"],["kind"]],["ordering"]]],[11,"eq","","",2,[[["nodeortoken"],["self"]],["bool"]]],[11,"ne","","",2,[[["nodeortoken"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["direction"]],["bool"]]],[11,"eq","","",3,[[["walkevent"],["self"]],["bool"]]],[11,"ne","","",3,[[["walkevent"],["self"]],["bool"]]],[11,"eq","rowan::green","",5,[[["self"],["greentoken"]],["bool"]]],[11,"ne","","",5,[[["self"],["greentoken"]],["bool"]]],[11,"eq","","",4,[[["greennode"],["self"]],["bool"]]],[11,"ne","","",4,[[["greennode"],["self"]],["bool"]]],[11,"eq","","",12,[[["self"],["checkpoint"]],["bool"]]],[11,"ne","","",12,[[["self"],["checkpoint"]],["bool"]]],[11,"eq","rowan::syntax","",8,[[["str"],["self"]],["bool"]]],[11,"eq","","",9,[[["self"]],["bool"]]],[11,"eq","","",15,[[["self"],["generic"]],["bool"]]],[11,"eq","rowan","",0,[[["self"],["kind"]],["bool"]]],[11,"ne","","",0,[[["self"],["kind"]],["bool"]]],[11,"partial_cmp","rowan::green","",12,[[["self"],["checkpoint"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",12,[[["self"],["checkpoint"]],["bool"]]],[11,"le","","",12,[[["self"],["checkpoint"]],["bool"]]],[11,"gt","","",12,[[["self"],["checkpoint"]],["bool"]]],[11,"ge","","",12,[[["self"],["checkpoint"]],["bool"]]],[11,"partial_cmp","rowan::syntax","",15,[[["self"],["generic"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","rowan","",0,[[["self"],["kind"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",0,[[["self"],["kind"]],["bool"]]],[11,"le","","",0,[[["self"],["kind"]],["bool"]]],[11,"gt","","",0,[[["self"],["kind"]],["bool"]]],[11,"ge","","",0,[[["self"],["kind"]],["bool"]]],[11,"to_string","rowan::syntax","",8,[[["self"]],["string"]]],[11,"fmt","rowan","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","rowan::green","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","rowan::syntax","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","rowan","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"hash","rowan::green","",5,[[["self"],["__h"]]]],[11,"hash","","",4,[[["self"],["__h"]]]],[11,"hash","","",12,[[["self"],["__h"]]]],[11,"hash","rowan::syntax","",9,[[["self"],["h"]]]],[11,"hash","","",15,[[["self"],["__h"]]]],[11,"hash","rowan","",0,[[["self"],["__h"]]]],[11,"unerase","rowan::green","",5,[[["erasedptr"]],["nonnull"]]],[11,"unerase","","",4,[[["erasedptr"]],["nonnull"]]],[11,"is_token","rowan::syntax","Determine if a node is a token.",11,[[["node"],["self"]],["bool"]]]],"p":[[3,"Kind"],[4,"Direction"],[4,"NodeOrToken"],[4,"WalkEvent"],[3,"GreenNode"],[3,"GreenToken"],[3,"GreenBuilder"],[3,"GreenTreeBuilder"],[3,"Text"],[3,"Node"],[3,"Token"],[8,"Language"],[3,"Checkpoint"],[3,"Children"],[3,"Children"],[3,"Generic"]]};
searchIndex["str_index"] = {"doc":"","i":[[3,"StrIndex","str_index","An index into a string.",null,null],[3,"StrRange","","A range of a string, represented as a half-open range of…",null,null],[11,"from_char_len","","Index equal to the string length of this `char`.",0,[[["char"]],["self"]]],[11,"from_str_len","","Index equal to the length of this string.",0,[[["str"]],["self"]]],[11,"to_usize","","This index as a raw `usize`.",0,[[],["usize"]]],[11,"checked_add","","Checked integer addition.",0,[[],["option"]]],[11,"checked_sub","","Checked integer subtraction.",0,[[],["option"]]],[11,"range_for","","A range starting at this index.",0,[[["strindex"]],["strrange"]]],[11,"range_to","","A range from this index to another.",0,[[["strindex"]],["strrange"]]],[11,"as_unit_range","","The empty range at this index.",0,[[],["strrange"]]],[11,"start","","The (inclusive) start index of this range.",1,[[],["strindex"]]],[11,"end","","The (exclusive) end index of this range.",1,[[],["strindex"]]],[11,"len","","The length of this range.",1,[[],["strindex"]]],[11,"is_empty","","Is this range a unit range? That is, does this range have…",1,[[],["bool"]]],[11,"with_start","","A range with an adjusted end.",1,[[["strindex"]],["strrange"]]],[11,"with_end","","A range with an adjusted end.",1,[[["strindex"]],["strrange"]]],[11,"is_disjoint","","Are these ranges disjoint?",1,[[["strrange"]],["bool"]]],[11,"intersection","","The range that is both in `self` and `other`.",1,[[],["option"]]],[11,"nonempty_intersection","","Like [`intersection`], but disjoint ranges always return…",1,[[],["option"]]],[11,"merge","","The range that covers both `self` and `other`.",1,[[],["self"]]],[11,"contains","","Does this range contain `other`?",1,[[["strrange"]],["bool"]]],[11,"contains_exclusive","","Does this range contain this index?",1,[[["strindex"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","","",0,[[["u32"]],["self"]]],[11,"from","","",1,[[["range",["strindex"]],["strindex"]],["self"]]],[11,"from","","",1,[[["strindex"],["rangeto",["strindex"]]],["self"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"sub","","",0,[[["strindex"]],["strindex"]]],[11,"sub","","",0,[[["strindex"]],["strindex"]]],[11,"eq","","",0,[[["self"],["strindex"]],["bool"]]],[11,"ne","","",0,[[["self"],["strindex"]],["bool"]]],[11,"eq","","",1,[[["strrange"],["self"]],["bool"]]],[11,"ne","","",1,[[["strrange"],["self"]],["bool"]]],[11,"cmp","","",0,[[["self"],["strindex"]],["ordering"]]],[11,"cmp","","",1,[[["strrange"],["self"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["strindex"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",0,[[["self"],["strindex"]],["bool"]]],[11,"le","","",0,[[["self"],["strindex"]],["bool"]]],[11,"gt","","",0,[[["self"],["strindex"]],["bool"]]],[11,"ge","","",0,[[["self"],["strindex"]],["bool"]]],[11,"partial_cmp","","",1,[[["strrange"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",1,[[["strrange"],["self"]],["bool"]]],[11,"le","","",1,[[["strrange"],["self"]],["bool"]]],[11,"gt","","",1,[[["strrange"],["self"]],["bool"]]],[11,"ge","","",1,[[["strrange"],["self"]],["bool"]]],[11,"try_from","","",0,[[["usize"]],["result"]]],[11,"add","","",0,[[["strindex"]],["strindex"]]],[11,"add","","",0,[[["strindex"]],["strindex"]]],[11,"add_assign","","",0,[[["self"],["rhs"]]]],[11,"sub_assign","","",0,[[["self"],["rhs"]]]],[11,"start_bound","","",1,[[["self"]],[["bound",["strindex"]],["strindex"]]]],[11,"end_bound","","",1,[[["self"]],[["bound",["strindex"]],["strindex"]]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"clone","","",0,[[["self"]],["strindex"]]],[11,"clone","","",1,[[["self"]],["strrange"]]],[11,"default","","",0,[[],["strindex"]]],[11,"default","","",1,[[],["strrange"]]]],"p":[[3,"StrIndex"],[3,"StrRange"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);